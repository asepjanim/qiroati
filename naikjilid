<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8">
  <title>Twibbonize Pro</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins&family=Pacifico&family=Anton&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Poppins', sans-serif;
      background: #f5f5f5;
      text-align: center;
      padding: 20px;
    }
    canvas {
      border: 1px solid #ccc;
      margin: 20px 0;
      cursor: grab;
    }
    input, select {
      margin: 5px;
      padding: 5px;
    }
  </style>
</head>
<body>
  <h2>Twibbonize Gratis - Pro Edition</h2>

  <input type="file" id="fotoInput" accept="image/*">
  <input type="file" id="twibbonInput" accept="image/png"><br>

  <input type="text" id="teksInput" placeholder="Tulis teks di sini...">
  <select id="fontSelect">
    <option value="Poppins">Poppins</option>
    <option value="Pacifico">Pacifico</option>
    <option value="Anton">Anton</option>
  </select>

  <canvas id="canvas" width="500" height="500"></canvas><br>
  <button onclick="downloadImage()">Download</button>

  <script>
    const canvas = document.getElementById("canvas");
    const ctx = canvas.getContext("2d");

    let foto = new Image();
    let twibbon = new Image();

    let fotoX = 0, fotoY = 0, fotoScale = 1;
    let teks = "", font = "Poppins", teksX = 250, teksY = 450, teksScale = 1;

    let dragging = false, dragTarget = null;
    let startX, startY;

    document.getElementById("fotoInput").addEventListener("change", e => {
      const reader = new FileReader();
      reader.onload = evt => {
        foto.onload = drawAll;
        foto.src = evt.target.result;
      };
      reader.readAsDataURL(e.target.files[0]);
    });

    document.getElementById("twibbonInput").addEventListener("change", e => {
      const reader = new FileReader();
      reader.onload = evt => {
        twibbon.onload = drawAll;
        twibbon.src = evt.target.result;
      };
      reader.readAsDataURL(e.target.files[0]);
    });

    document.getElementById("teksInput").addEventListener("input", e => {
      teks = e.target.value;
      drawAll();
    });

    document.getElementById("fontSelect").addEventListener("change", e => {
      font = e.target.value;
      drawAll();
    });

    canvas.addEventListener("mousedown", e => {
      const x = e.offsetX;
      const y = e.offsetY;
      // Deteksi teks dulu
      ctx.font = `${30 * teksScale}px ${font}`;
      const width = ctx.measureText(teks).width;
      const height = 30 * teksScale;
      if (x > teksX - width / 2 && x < teksX + width / 2 && y > teksY - height && y < teksY) {
        dragTarget = "text";
      } else {
        dragTarget = "foto";
      }
      dragging = true;
      startX = x;
      startY = y;
    });

    canvas.addEventListener("mousemove", e => {
      if (!dragging) return;
      const dx = e.offsetX - startX;
      const dy = e.offsetY - startY;
      if (dragTarget === "foto") {
        fotoX += dx;
        fotoY += dy;
      } else if (dragTarget === "text") {
        teksX += dx;
        teksY += dy;
      }
      startX = e.offsetX;
      startY = e.offsetY;
      drawAll();
    });

    canvas.addEventListener("mouseup", () => dragging = false);
    canvas.addEventListener("mouseleave", () => dragging = false);

    // Zoom
    canvas.addEventListener("wheel", e => {
      e.preventDefault();
      const zoomAmount = e.deltaY * -0.001;
      if (dragTarget === "foto") {
        fotoScale += zoomAmount;
        fotoScale = Math.max(0.1, Math.min(5, fotoScale));
      } else if (dragTarget === "text") {
        teksScale += zoomAmount;
        teksScale = Math.max(0.1, Math.min(5, teksScale));
      }
      drawAll();
    });

    function drawAll() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      if (foto.src) {
        const w = foto.width * fotoScale;
        const h = foto.height * fotoScale;
        ctx.drawImage(foto, fotoX, fotoY, w, h);
      }
      if (twibbon.src) {
        ctx.drawImage(twibbon, 0, 0, canvas.width, canvas.height);
      }
      if (teks) {
        ctx.font = `${30 * teksScale}px ${font}`;
        ctx.fillStyle = "white";
        ctx.strokeStyle = "black";
        ctx.lineWidth = 2;
        ctx.textAlign = "center";
        ctx.strokeText(teks, teksX, teksY);
        ctx.fillText(teks, teksX, teksY);
      }
    }

    function downloadImage() {
      const link = document.createElement('a');
      link.download = 'twibbon-hasil.png';
      link.href = canvas.toDataURL();
      link.click();
    }
  </script>
</body>
</html>
